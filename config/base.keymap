/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires auto-layer module
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


#include "zmk-helpers/helper.h"

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Symbols 1
#define LAYER_Numbers 2
#define LAYER_Arrows 3
#define LAYER_Adjust 4
#define LAYER_Move 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

#define KEYS_R POS_RH_T1 57   \
POS_RH_T2 56   \
POS_RH_T3 55   \
POS_RH_T4 74   \
POS_RH_T5 73   \
POS_RH_T6 72   \
POS_RH_C1R2 16 \
POS_RH_C1R3 28 \
POS_RH_C1R4 40 \
POS_RH_C1R5 58 \
POS_RH_C2R1 5  \
POS_RH_C2R2 17 \
POS_RH_C2R3 29 \
POS_RH_C2R4 41 \
POS_RH_C2R5 59 \
POS_RH_C2R6 75 \
POS_RH_C3R1 6  \
POS_RH_C3R2 18 \
POS_RH_C3R3 30 \
POS_RH_C3R4 42 \
POS_RH_C3R5 60 \
POS_RH_C3R6 76 \
POS_RH_C4R1 7  \
POS_RH_C4R2 19 \
POS_RH_C4R3 31 \
POS_RH_C4R4 43 \
POS_RH_C4R5 61 \
POS_RH_C4R6 77 \
POS_RH_C5R1 8  \
POS_RH_C5R2 20 \
POS_RH_C5R3 32 \
POS_RH_C5R4 44 \
POS_RH_C5R5 62 \
POS_RH_C5R6 78 \
POS_RH_C6R1 9  \
POS_RH_C6R2 21 \
POS_RH_C6R3 33 \
POS_RH_C6R4 45 \
POS_RH_C6R5 63 \
POS_RH_C6R6 79 \


#define KEYS_L POS_LH_T1 52  \
POS_LH_T2 53  \
POS_LH_T3 54  \
POS_LH_T4 69  \
POS_LH_T5 70  \
POS_LH_T6 71  \
POS_LH_C1R2 15 \
POS_LH_C1R3 27 \
POS_LH_C1R4 39 \
POS_LH_C1R5 51 \
POS_LH_C2R1 4  \
POS_LH_C2R2 14 \
POS_LH_C2R3 26 \
POS_LH_C2R4 38 \
POS_LH_C2R5 50 \
POS_LH_C2R6 68 \
POS_LH_C3R1 3  \
POS_LH_C3R2 13 \
POS_LH_C3R3 25 \
POS_LH_C3R4 37 \
POS_LH_C3R5 49 \
POS_LH_C3R6 67 \
POS_LH_C4R1 2  \
POS_LH_C4R2 12 \
POS_LH_C4R3 24 \
POS_LH_C4R4 36 \
POS_LH_C4R5 48 \
POS_LH_C4R6 66 \
POS_LH_C5R1 1  \
POS_LH_C5R2 11 \
POS_LH_C5R3 23 \
POS_LH_C5R4 35 \
POS_LH_C5R5 47 \
POS_LH_C5R6 65 \
POS_LH_C6R1 0  \
POS_LH_C6R2 10 \
POS_LH_C6R3 22 \
POS_LH_C6R4 34 \
POS_LH_C6R5 46 \
POS_LH_C6R6 64 \



#define QUICK_TAP_MS 175


#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L)  // right-hand HRMs

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};


&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};


// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )


// tap: space | shift + tap: sticky move layer | hold: arrows layer
ZMK_HOLD_TAP(lt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_MOD_MORPH(spc_morph,
    bindings = <&kp SPACE>, <&spc_macro>;
    mods = <(MOD_LSFT)>;
)
ZMK_MACRO(spc_macro,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings = <&kp K_CANCEL &sl LAYER_Move>;
)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: move layer
#define SMART_SHIFT &smart_shft LAYER_Move 0
ZMK_HOLD_TAP(smart_shft,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&shft_dance>;
)
ZMK_TAP_DANCE(shft_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;  // reverse this for sticky-num on single tap
)

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num LAYER_Numbers 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word LAYER_Numbers>, <&sl LAYER_Numbers>;  // reverse this for sticky-num on single tap
)

// tap: dot | shift + tap: colon
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp COLON)

// tap: comma | shift + tap: semicolon
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp SEMI)

// tap: underscore | shift + tap: minus
SIMPLE_MORPH(under_morph, SFT, &kp UNDERSCORE, &kp MINUS)

// tap: double quote | shift + tap: single quote
SIMPLE_MORPH(fnut_morph, SFT, &kp DQT, &kp SQT)

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";
        layer_Base {
            bindings = <
   &none   &none   &none    &none       &none                                                                       &none     &none      &none        &none       &none
   &none   &none   &none    &none       &kp DELETE          &none                                                        &none     &none      &none        &none       &none        &none
   &none   &kp Q   &kp W    &kp F       &kp P          &kp B                                                        &kp J     &kp L      &kp U        &kp Y       &fnut_morph  &none
   &kp ESC &kp A   &kp R    &hml LALT S &hml LCTRL T   &kp G                                                        &kp M     &hmr LCTRL N            &hmr LALT E &kp I        &kp O  &none
   &none   &kp Z   &kp X    &kp C       &kp D          &kp V     &none       &none   &none   &none   &none  &none   &kp K     &kp H      &comma_morph &dot_morph  &under_morph &none
   &none   &none   &none    &kp TAB     &kp RET               &lt_spc 3 0 &sl LAYER_Symbols   &none   &none    SMART_NUM  SMART_SHIFT  &kp BSPC  &none      &none        &none       &none
            >;
        };
        layer_Symbols {
            bindings = <
  &none     &none      &none      &none     &none                                                                         &none     &none      &none      &none    &none
  &none     &none      &none      &none     &none     &none                                                    &none      &none     &none      &none      &none    &none
  &none     &kp GRAVE  &kp PLUS   &kp STAR  &kp QMARK &none                                                    &none      &kp AMPS  &kp FSLH   &kp TILDE  &none    &none
  &none     &kp CARET  &kp LBKT   &kp LBRC  &kp LPAR  &kp AT                                                   &kp PIPE   &kp RPAR  &kp RBRC   &kp RBKT   &kp DLLR &none
  &none     &none      &kp PRCNT  &kp LT    &kp GT    &none  &none   &none   &none   &none   &none   &none     &none      &kp EQUAL &kp EXCL   &kp HASH   &none    &none
  &none     &none      &none      &trans    &trans           &none   &none   &none   &none   &mo 4   &none                &trans    &trans     &none      &none    &none
            >;
        };
        layer_Numbers {
            bindings = <
  &none      &none     &none      &none     &none                                                                        &none     &none     &none      &none   &none
  &none      &none     &none      &none     &none   &none                                                     &none      &none     &none     &none      &none   &none
  &none      &trans    &trans     &trans    &trans  &trans                                                     &trans      &trans     &trans     &trans      &trans   &trans
  &trans     &kp N0    &kp N1     &kp N2    &kp N3  &kp N4                                                    &kp N5     &kp N6    &kp N7    &kp N8     &kp N9  &trans
  &none      &trans    &trans     &trans    &trans  &none   &trans   &none   &none   &none   &none   &none     &trans     &trans     &trans     &trans      &trans   &trans
  &none      &trans    &trans     &trans    &trans          &trans   &mo 4  &trans   &none   &none   &none               &trans    &trans     &none      &none   &none
            >;
        };

        layer_Arrows {
            bindings = <
  &none   &none   &none   &none      &none                                                                     &none     &none   &none      &none   &none
  &none   &none   &none   &none      &none   &none                                                   &none     &none     &none   &none      &none   &none
  &none   &none   &none   &none      &none   &none                                                   &none     &none     &none   &none      &none   &none
  &none   &none   &none   &none  &kp LCTRL   &none                                                   &none  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT   &none
  &none   &none   &none   &none      &none   &none   &none   &none   &none   &none   &none   &none   &none     &none     &none   &none      &none   &none
  &none   &none   &none   &none      &none           &none   &none   &none  &trans   &none   &none             &none     &none   &none      &none   &none
            >;
        };

        layer_Adjust {
            bindings = <
  &none        &none   &none   &none   &none                                                                           &none         &none         &none        &none   &none
  &none        &none   &none   &none   &none   &none                                                       &none       &none         &none         &none        &none   &none
  &none  &bootloader   &none   &none   &none   &none                                                       &none       &none  &kp C_BRI_DN  &kp C_BRI_UP  &bootloader   &none
  &none        &none   &none   &none   &none   &none                                                    &kp K_PP  &kp K_PREV  &kp K_VOL_DN  &kp K_VOL_UP   &kp K_NEXT   &none
  &none        &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none  &kp K_MUTE       &none         &none         &none        &none   &none
  &none        &none   &none   &none   &none           &none   &none   &none   &none   &none   &none                   &none         &none         &none        &none   &none
            >;
        };

        layer_Move {
            bindings = <
  &none          &none           &none           &none           &none                                                                      &none      &none      &none      &none   &none
  &none          &none           &none           &none           &none   &none                                                   &none      &none      &none      &none      &none   &none
  &none          &none           &none           &none           &none   &none                                                   &none      &kp A      &none      &none      &none   &none
  &none          &none           &kp LA(LS(N1))  &kp LA(LS(N2))  &kp LA(LS(N3))  &none                                           &none      &kp LA(N1) &kp LA(N2) &kp LA(N3) &none   &none
  &none          &none           &none           &none           &none   &none   &none   &none   &none   &none   &none   &none   &none      &none      &none      &none      &none   &none
  &none          &none           &none           &none           &none           &none   &none   &none   &none   &none   &none              &none      &none      &none      &none   &none
            >;
        };

    };
};
